comment {
    The adaptive vaccination behavior model implemented in this condition is from Vardavas et al., 2007, 
    and was inspired by Minority Game methodology. That original model was analyzed and extended by Breban et al., 2007 
    and Vardavas and Marcum, 2013.
    
    Breban, R., Vardavas, R., Blower, S., 2007. 
    Mean-field analysis of an inductive reasoning game: application to influenza vaccination. 
    Phys Rev E Stat Nonlin Soft Matter Phys 76, 031127.

    Vardavas, R., Breban, R., Blower, S., 2007. 
    Can influenza epidemics be prevented by voluntary vaccination? 
    PLoS Comput Biol 3, e85. https://doi.org/10.1371/journal.pcbi.0030085

    Vardavas, R., Marcum, C.S., 2013. 
    Modeling the Interplay between Human Behavior and Spread of Infectious Disease, 
    in: d’Onofrio, A., Manfredi, P. (Eds.), . Springer Series on Behavioral Epidemiology, pp. 203–227.
}

variables {
    shared numeric immu_coverage # count immunized (by vaccine)
    shared numeric s_mem
    shared numeric vacc_coverage # count vaccinated
    
    agent numeric delta
    agent numeric immunized 
    agent numeric misinformed
    agent numeric vaccinated
    agent numeric v_tally
    agent numeric wait_year
}

startup {
    immu_coverage = 0
    vacc_coverage = 0 
    
    s_mem   = exp(- log(memory_half_time) / 2)
    v_tally = (probability_of_vaccination / 100) / (1 - s_mem)
}

agent_startup {
    vaccinated = bernoulli(probability_of_vaccination / 100)
    vacc_coverage = vacc_coverage + vaccinated
    print_csv(outcomes.csv, id(), year() - 1, 0, vaccinated, 0)
    misinformed = 0
}

condition VACCINATION {

    start_state = Deciding
    meta_start_state = Meta_Start

    state Meta_Start {
        wait(until(year() + 1, Jan, 1, 2))
        default(Reset_Counts)
    }

    state Reset_Counts {
        immu_coverage = 0
        vacc_coverage = 0 
        
        wait(until(Jan, 1, 2))
        default(Reset_Counts)
    }

    state Deciding {
        delta = 0
        
        if (vaccinated) then {
            if (exposed) then {
                delta = 0.5
            } else {
                if (cumu_incidence > ((incidence_threshold / 100) * tot_agents)) then {
                    delta = 1
                }
            }
        } else {
            if (exposed) then {
                delta = 1
            } else {
                delta = 0
            }
        }

        delta = delta * (1 - misinformed)
        v_tally = s_mem * v_tally + delta
        
        immunized = 0
        vaccinated = 0
    
        wait(0)
        next(Vaccinated) with prob(v_tally * (1 - s_mem))
        default(Unvaccinated)
    }

    state Unvaccinated {
        wait(0)
        default(Waiting)
    }
    
    state Vaccinated {
        vaccinated = 1 
        vacc_coverage = vacc_coverage + 1 
        
        wait(0)
        next(Vaccinated_Immune) with prob(vacc_efficacy / 100)
        default(Vaccinated_Susceptible)
    }
    
    state Vaccinated_Susceptible {
        wait(0)
        default(Waiting)
    }
    
    state Vaccinated_Immune {
        immunized = 1
        immu_coverage = immu_coverage + 1
        INFLUENZA.wait_year = year() + 2
        set_state(INFLUENZA, Immune)
        
        wait(0)
        default(Waiting)
    }
    
    state Waiting {
        wait(until(Dec, 31))
        default(Deciding)
    }
}
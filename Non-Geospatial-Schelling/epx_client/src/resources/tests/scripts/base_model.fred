simulation {
    start_date = 2020-Jan-01
    end_date = 2020-Jan-14
    locations = Loving_County_TX
}

startup {
    open_csv(sample.csv, "id", "num")
}

variables {
    shared numeric sample_numeric
    sample_numeric.output = 1

    shared list sample_list
    sample_list.output = 1
    sample_list.output_interval = 1

    shared table sample_table
    sample_table.output = 1
    sample_table.output_interval = 1

    shared list_table sample_list_table
    sample_list_table.output = 1
    sample_list_table.output_interval = 1

    shared list agents_to_test
    agents_to_test = list(204941490, 204941492, 212692138, 261974858, 261974859, 261974860)

    shared list agents_to_join_asap
    agents_to_join_asap = list(204941490, 204941492, 212692138)

    shared numeric first_agent_id
    first_agent_id = 204941490

    shared numeric second_agent_id
    second_agent_id = 204941492
}

condition UPDATE_VARIABLES {
    meta_start_state = UpdateNumeric

    state UpdateNumeric {
        sample_numeric = 1.1 * sim_day()
        wait(0)
        next(UpdateList)
    }

    state UpdateList {
        sample_list = list(1.1 * sim_day(), 2.2 * sim_day(), 3.3 * sim_day())
        wait(0)
        next(UpdateTable)
    }

    state UpdateTable {
        sample_table[2] = 1.1 * sim_day()
        sample_table[4] = 2.2 * sim_day()
        sample_table[8] = 3.3 * sim_day()
        wait(0)
        next(UpdateListTable)
    }

    state UpdateListTable {
        sample_list_table[3] = list(1.1 * sim_day())
        sample_list_table[6] = list(1.1 * sim_day(), 2.2 * sim_day())
        sample_list_table[9] = list(1.1 * sim_day(), 2.2 * sim_day(), 3.3 * sim_day())
        wait(0)
        next(Wait)
    }

    state Wait {
        wait(24)
        next(UpdateNumeric)
    }
}

condition WRITE_CSV {
    start_state = WriteCsv

    state WriteCsv {
        print_csv(sample.csv, id(), uniform(0, 1))
        wait(0)
        next(Wait)
    }

    state Wait {
        wait(24)
        next(WriteCsv)
    }
}

condition WRITE_FILE {
    start_state = WriteFile

    state WriteFile {
        print_file(sample_file.txt, id(), list(1.1 * sim_day(), 2.2 * sim_day()), "sample string")
        wait(0)
        next(Wait)
    }

    state Wait {
        wait(24)
        next(WriteFile)
    }
}

condition TRANS_CONDITION {
    start_state = Susceptible

    transmission_mode = proximity
    transmissibility = 1.0
    start_state = Susceptible
    exposed_state = Exposed
    meta_start_state = Import

    state Import {
        print("Importing exposures!")
        import_exposures(TRANS_CONDITION, 10)
        wait()
        default()
    }

    state Susceptible {
        wait()
        default()
    }

    state Exposed {
        TRANS_CONDITION.sus = 0
        wait(24 * lognormal(5.0, 1.5))
        default(Recovered)
    }

    state Recovered {
        TRANS_CONDITION.trans = 0
        wait()
        default()
    }
}

network undirected {
	is_directed = 0
	output_interval = 2
}
network directed {
    output_interval = 2
}

condition Observee {
    start_state = AllAgentStart

    state AllAgentStart {
        if (is_in_list(agents_to_join_asap, id())) then join(undirected)
        if (is_in_list(agents_to_join_asap, id())) then join(directed)

        wait(48)

        if (is_in_list(agents_to_test, id())) then next(StateA)
        default(Excluded)
    }

    state StateA {
        if (is_member(undirected) == 0) then {
            join(undirected)
        }
        if (id() == first_agent_id) then {
            add_edge(undirected, first_agent_id, second_agent_id)
            add_edge(undirected, second_agent_id, first_agent_id)
            set_weight(undirected, second_agent_id, first_agent_id, 8675309)
        }
        if (is_member(directed) == 0) then {
            join(directed)
        }
        if (id() == first_agent_id) then {
            add_edge(directed, first_agent_id, second_agent_id)
            add_edge(directed, second_agent_id, first_agent_id)
            set_weight(directed, second_agent_id, first_agent_id, 8675309)
        }

        wait(48)
        if (id() == first_agent_id) then next(StateB)
        default(Excluded)
    }

    state StateB {
        quit(undirected)
        quit(directed)
        wait(47)
        default(StateC)
    }

    state StateC {
        join(undirected)
        join(directed)
        wait(0)
        default(Excluded)
    }
}

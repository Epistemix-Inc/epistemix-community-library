comment {

   This model implements Schelling's simple model of spatial segregation
   in a community using the FRED synthetic population. The happiness of
   an individual agent is assessed based on the makeup of their blockgroup.
   
}

simulation {
    locations = Kewaunee_County_WI
    start_date = 2023-Jan-01
    end_date = 2023-Jan-14
}

variables {
    # global variables
    shared numeric desired_similarity # agents need at least this fraction of neighbors to be similar to be happy
    shared numeric frac_empty # the fraction of empty households to create in the simulation
    
    # tables/list tables to track output for visualization
    shared table agent_colors
    shared table empty_households # tracks the list of empty households available to unhappy agents
    
    # variables for block group agents
    agent numeric block_blue block_red has_agent_moved # number of people in my current block group of each color
    agent numeric frac_blue frac_red # expressed as fractions of block group population
    
    # agent variables for regular agents
    agent numeric household_relationship
    agent numeric my_color 
    agent numeric my_happiness

    # agent variables used to track regular agent household history
    agent numeric my_current_household
    agent numeric my_current_blockgroup
    agent numeric my_new_household
    agent numeric my_new_blockgroup
}

startup {   

   desired_similarity = 0.5 # fraction of block group neighbors that must be the same color to be happy
   frac_empty = 0.1 # fraction of empty households
    
   # open files to record additional output of the simulation 
   open_csv(household_info.csv,"household_id","blockgroup_id","house_lat", \
    "house_long","agent_id")
   open_csv(agent_info.csv,"agent_id","agent_color")
   open_csv(agent_moving_history.csv,"agent_id","move_date","old_household", \
    "new_household")
   open_csv(block_color_history.csv,"blockgroup_id","date","n_blue","n_red","frac_blue","frac_red","n_agents")
   open_csv(agent_house_history.csv,"agent_id","date","household_id","blockgroup_id","agent_color")
}

agent_startup {
   my_color = round(uniform(0.0,1.0))
}

place Block_Group {
   has_group_agent = 1
}

condition SETUP_AGENTS {

   comment {
      
      This state removes all non-householder agents from the simulation so we work
      with only one agent per household. We then create frac_empty empty households
      so that unhappy agents have empty locations to move to.

   }

    start_state = agentStart
    group_start_state = Excluded
    meta_start_state = Excluded
 
    state agentStart {
      if(household_relationship == householder & is_member(Household)) then next(setupHouseholders)
      wait(0)
      default(removeNonHouseholders)
   }

   state removeNonHouseholders {
      quit(Household)
      quit(Block_Group)
      exit()
      wait(0)
      next(Excluded)
   }

   state setupHouseholders {
      print_csv(household_info.csv,Household,Block_Group,latitude(Household),longitude(Household),id)
      wait(0)
      next(createEmptyHouseholds) with prob(frac_empty)
      default(ReportInformation)
   }

   state createEmptyHouseholds {
      empty_households[Household] = Block_Group
      quit(Household)
      quit(Block_Group)
      exit()
      wait(0)
      next(Excluded)
   }
    
   state ReportInformation {
      print_csv(agent_info.csv,id,my_color)
      wait(0)
      next(Excluded)
    }
}



condition DETERMINE_BLOCK_COLOR {

   comment {

      In this condition block group admin agents ask block group members their color
      and assigns the totals to personal variables. Agents query these personal variables
      in the HAPPINESS condition.

   }

   start_state = Excluded
   group_start_state = groupStart
   meta_start_state = Excluded

   state groupStart {
      if (is_group_agent(Block_Group)) then next(determineColor)
      wait(1)
      default(Excluded)
   }

   state determineColor {
      block_blue = length(select(ask(members(Block_Group),my_color),_ == 0))
      block_red = length(select(ask(members(Block_Group),my_color),_ == 1))
      wait(0)
      default(updateColorFracs)
   } 

   state updateColorFracs {
       frac_blue = block_blue / (block_blue + block_red)
       frac_red = 1 - frac_blue
       print_csv(block_color_history.csv,id,today,block_blue,block_red,frac_blue,frac_red,block_blue+block_red)
       if (has_agent_moved == 1) then send(members(Block_Group),HAPPINESS,EvaluateHappiness)
       has_agent_moved = 0
       wait(24)
       #wait(0)
       #default(waitToUpdate)
       default(updateColorFracs)
       
       # try a self transition to see if it works
       # wait(24)
       # default(UpdateColorFracs)
    }

    #state waitToUpdate {
    #    wait(24)
    #    default(UpdateColorFracs)
    #}
}

condition HAPPINESS {

   comment {

      This condition determines whether individual agents are happy or unhappy
      with the color makeup of their block group neighbors.

   }

   start_state = agentStart
   group_start_state = Excluded
   meta_start_state = Excluded

   state agentStart {
      wait(2)
      if (my_color == 0) then next(EvaluateHappinessBlue)
      default(EvaluateHappinessRed)
   }
    
   state EvaluateHappiness {
      wait(0)
      if (my_color == 0) then next(EvaluateHappinessBlue)
      default(EvaluateHappinessRed)
   }
      
   state EvaluateHappinessBlue {
      wait(0)
      if (ask(Block_Group,frac_blue) >= desired_similarity) then next(Happy)
      default(Unhappy)
   }

   state EvaluateHappinessRed {
      wait(0)
      if (ask(Block_Group,frac_red) >= desired_similarity) then next(Happy)
      default(Unhappy)
   }

   state Unhappy {
      my_happiness = 0
      wait()
      next()
   }

   state Happy {
      my_happiness = 1
      wait()
      next()
   }
}

condition MOVE {

   comment {

      Unhappy agents move to an empty household.

   }

   start_state = Stay
   group_start_state = Excluded
   meta_start_state = Excluded

   state reportHousehold {
      print_csv(agent_house_history.csv,id,today, Household,Block_Group,my_color)
      wait(0)
      if(my_happiness == 0) then next(Move)
      default(Stay)
   }

   state Stay {
      wait(24)
      next(reportHousehold)
   }

   state Move {
      my_current_household = Household
      my_current_blockgroup = Block_Group
      #print("Agent id ",id," entered the move state.")
      if (my_color == 0) then tell(Block_Group, block_blue, ask(_,block_blue)-1)
      if (my_color == 1) then tell(Block_Group, block_red, ask(_,block_red)-1)
      tell(Block_Group, has_agent_moved, 1)
      quit(Household)
      quit(Block_Group)

      # find the Household ID of a random empty household to move to
      my_new_household = select(shuffle(get_keys(empty_households)),0)
      my_new_blockgroup = lookup(empty_households,my_new_household)

      join(Household,my_new_household)
      join(Block_Group,my_new_blockgroup)
      
      # remove new household from empty_household
      erase(empty_households,my_new_household)

      # add old house to the empty household list
      empty_households[my_current_household] =  my_current_blockgroup
      if (my_color == 0) then tell(Block_Group, block_blue, ask(_,block_blue)+1)
      if (my_color == 1) then tell(Block_Group, block_red, ask(_,block_red)+1)
      tell(Block_Group, has_agent_moved, 1)
      wait(24)
      next(reportHousehold)
   }
}


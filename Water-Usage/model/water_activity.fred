comment {

    A condition for household group agents that defines a volume rate for each households water-usage based on the composition of the household and determining how many of each water activity that they do in a day.
    There are also states (reached from each specific activity state) that update the current sum of the volume rates for the current activities of each member of the Household and record.

    Authors
    -------
    Paige Miller : paige.miller@epistemix.com
    Noah Burrell : noah.burrell@epistemix.com
}

variables {
    agent numeric num_kids 
    agent numeric num_adults
}

condition WATER_ACTIVITY {
    
    comment {

        Subjected
        --------
        agent : False
        group : True
        meta : False

        Variables
        ---------
        household_usage : agent numeric
            total Household water usage in the current month. 
            for a given activity, usage = duration (in seconds) * intensity (in liters/second)
            
        ACTIVITY_constant : condition agent numeric 
            random variable that slightly adjusts the intensity of ACTIVITY for each agent 
            updated monthly (future: add bias towards shrinking with policy change) 
                - Lawn_constant
                - Laundry_constant
                - Toilet_constant
                - Shower_constant
                - Eating_constant 
                - Cleaning_constant
    }
    
    variables {
        agent numeric Lawn_constant
        agent numeric Laundry_constant
        agent numeric Toilet_constant
        agent numeric Shower_constant
        agent numeric Eating_constant
        agent numeric Cleaning_constant
        
        
        Lawn_constant = 3000
        Laundry_constant = 70
        Toilet_constant = 9
        Shower_constant = 40
        Eating_constant = 8
        Cleaning_constant = 3
    }
    
    start_state = Excluded
    group_start_state = Start
    meta_start_state = Excluded
    
    state Start {
        wait(until(8pm))
        if (is_group_agent(Household)) then next(HouseSize)
        default(Excluded)
    }
    
    state HouseSize {
        num_kids=length(select(members(Household), ask(_, age()) < 16))
        num_adults=length(select(members(Household), ask(_, age()) >= 16))
        wait(0)
        default(CheckHousehold)
    }
    
    state CheckHousehold {
        wait(0)
        if (num_kids + num_adults > 0) then next(ComputeDailyTotal)
        default(Start)
    
    }
    
    state ComputeDailyTotal {
        household_usage = household_usage + \
                        sum(list(                                                      \
                            Toilet_constant   * poisson(6.5 * (num_kids+num_adults)),  \
                            Shower_constant   * poisson(1.0 * num_adults),             \
                            Eating_constant   * poisson(5.0 * (num_kids+num_adults)),  \
                            Cleaning_constant * poisson(1.5 * num_adults),             \
                            Laundry_constant  * poisson(0.33 * (num_kids+num_adults)), \
                            Lawn_constant     * bernoulli(1/7)                         \
                        ))

        wait(1)
        default(Start)
    }
}